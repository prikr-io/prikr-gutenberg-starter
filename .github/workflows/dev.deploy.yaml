name: Development | ðŸš€ Deploy website on push
on:
  push:
    branches: [develop]
  pull_request:
    types: [closed]
    branches: [develop]
jobs:
  web-deploy:
    name: ðŸŽ‰ Deploy to development server
    runs-on: ubuntu-latest
    env:
      LIVE_SITE_URL: ${{ vars.DEV_SITE_URL }}
      DESTINATION_PATH: ${{ vars.DEV_DESTINATION_PATH }}
    steps:
      - name: ðŸšš Get latest code
        uses: actions/checkout@v3

      - name: ðŸ›  Building project
        run: |
          npm install
          npm run build

      - name: ðŸ“‚ Sync files
        uses: SamKirkland/web-deploy@v1
        with:
          target-server: ${{ vars.PRIKR_IP }}
          remote-user: ${{ vars.SSH_USERNAME }}
          private-ssh-key: ${{ secrets.PRIVATE_RSA_KEY }}
          ssh-port: ${{ vars.PRIKR_PORT }}
          destination-path: ${{ env.DESTINATION_PATH }}
          rsync-options: --delete-after --recursive --itemize-changes --exclude=.git*/** --exclude=.git* --exclude=**/.git*/** --exclude=src/** --exclude=src --exclude=node_modules --exclude=.prettierignore --exclude=.prettierrc.json --exclude=postcss.config.js --exclude=tailwind.config.js --exclude=.eslintrc.js --exclude=.googlefont.list --exclude=.purgecss.safelist.js --exclude=createdby.prikr.scss --exclude=.googlefonts.list --exclude=.babelrc --exclude=.gitignore --exclude=.eslintignore --exclude=.stylelintrc.json --exclude=gulpfile.js --exclude=package.json --exclude=package-lock.json --exclude=README.md --exclude=style.rejected.css --exclude=operators/** --exclude=operators --exclude=./src/** --exclude=./src --exclude=log/** --exclude=log
      
      - name: ðŸ“¸ Take Screenshot of Live Site
        run: |
          npm install puppeteer
          echo "const puppeteer = require('puppeteer');" > screenshot.js
          echo "async function run() {" >> screenshot.js
          echo "  const browser = await puppeteer.launch();" >> screenshot.js
          echo "  const page = await browser.newPage();" >> screenshot.js
          echo "  await page.setViewport({ width: 1920, height: 1080 });" >> screenshot.js
          echo "  await page.goto('${{ env.LIVE_SITE_URL }}');" >> screenshot.js
          echo "  await page.screenshot({path: 'screenshot.png'});" >> screenshot.js
          echo "  await browser.close();" >> screenshot.js
          echo "}" >> screenshot.js
          echo "run();" >> screenshot.js
          node screenshot.js

      - name: ðŸ”„ Upload Screenshot
        run: |
          # Create a temporary SSH key file
          SSH_KEY_FILE=$(mktemp)
          echo "${{ secrets.PRIVATE_RSA_KEY }}" > $SSH_KEY_FILE
          chmod 600 $SSH_KEY_FILE

          # Use the temporary file in the scp command
          scp -P ${{ vars.PRIKR_PORT }} -i $SSH_KEY_FILE screenshot.png ${{ vars.SSH_USERNAME }}@${{ vars.PRIKR_IP }}:${{ env.DESTINATION_PATH }}/screenshot.png

          # Clean up: remove the temporary SSH key file
          rm $SSH_KEY_FILE